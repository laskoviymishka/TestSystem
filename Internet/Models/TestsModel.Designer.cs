//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("TestModel", "FK_Answers_Questions", "Questions", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Internet.Models.Question), "Answers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Internet.Models.Answer), true)]
[assembly: EdmRelationshipAttribute("TestModel", "FK_Tests_Difficulty", "Difficulty", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Internet.Models.Difficulty), "Tests", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Internet.Models.Test), true)]
[assembly: EdmRelationshipAttribute("TestModel", "FK_Questions_Tests", "Tests", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Internet.Models.Test), "Questions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Internet.Models.Question), true)]
[assembly: EdmRelationshipAttribute("TestModel", "FK_Tests_TestCategory", "TestCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Internet.Models.TestCategory), "Tests", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Internet.Models.Test), true)]
[assembly: EdmRelationshipAttribute("TestModel", "FK_Results_Tests", "Test", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Internet.Models.Test), "Result", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Internet.Models.Result), true)]
[assembly: EdmRelationshipAttribute("TestModel", "FK_AnswersResults_Answers", "Answer", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Internet.Models.Answer), "AnswerResult", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Internet.Models.AnswerResult), true)]
[assembly: EdmRelationshipAttribute("TestModel", "FK_AnswersResults_Results", "Result", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Internet.Models.Result), "AnswerResult", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Internet.Models.AnswerResult), true)]

#endregion

namespace Internet.Models
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class TestEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект TestEntities, используя строку соединения из раздела "TestEntities" файла конфигурации приложения.
        /// </summary>
        public TestEntities() : base("name=TestEntities", "TestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта TestEntities.
        /// </summary>
        public TestEntities(string connectionString) : base(connectionString, "TestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта TestEntities.
        /// </summary>
        public TestEntities(EntityConnection connection) : base(connection, "TestEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Answer> Answers
        {
            get
            {
                if ((_Answers == null))
                {
                    _Answers = base.CreateObjectSet<Answer>("Answers");
                }
                return _Answers;
            }
        }
        private ObjectSet<Answer> _Answers;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Difficulty> Difficulties
        {
            get
            {
                if ((_Difficulties == null))
                {
                    _Difficulties = base.CreateObjectSet<Difficulty>("Difficulties");
                }
                return _Difficulties;
            }
        }
        private ObjectSet<Difficulty> _Difficulties;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Question> Questions
        {
            get
            {
                if ((_Questions == null))
                {
                    _Questions = base.CreateObjectSet<Question>("Questions");
                }
                return _Questions;
            }
        }
        private ObjectSet<Question> _Questions;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<sysdiagram> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagram>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<TestCategory> TestCategories
        {
            get
            {
                if ((_TestCategories == null))
                {
                    _TestCategories = base.CreateObjectSet<TestCategory>("TestCategories");
                }
                return _TestCategories;
            }
        }
        private ObjectSet<TestCategory> _TestCategories;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Test> Tests
        {
            get
            {
                if ((_Tests == null))
                {
                    _Tests = base.CreateObjectSet<Test>("Tests");
                }
                return _Tests;
            }
        }
        private ObjectSet<Test> _Tests;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Result> Results
        {
            get
            {
                if ((_Results == null))
                {
                    _Results = base.CreateObjectSet<Result>("Results");
                }
                return _Results;
            }
        }
        private ObjectSet<Result> _Results;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<AnswerResult> AnswerResults
        {
            get
            {
                if ((_AnswerResults == null))
                {
                    _AnswerResults = base.CreateObjectSet<AnswerResult>("AnswerResults");
                }
                return _AnswerResults;
            }
        }
        private ObjectSet<AnswerResult> _AnswerResults;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Answers. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAnswers(Answer answer)
        {
            base.AddObject("Answers", answer);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Difficulties. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDifficulties(Difficulty difficulty)
        {
            base.AddObject("Difficulties", difficulty);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Questions. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToQuestions(Question question)
        {
            base.AddObject("Questions", question);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet sysdiagrams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTosysdiagrams(sysdiagram sysdiagram)
        {
            base.AddObject("sysdiagrams", sysdiagram);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet TestCategories. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTestCategories(TestCategory testCategory)
        {
            base.AddObject("TestCategories", testCategory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Tests. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTests(Test test)
        {
            base.AddObject("Tests", test);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Results. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToResults(Result result)
        {
            base.AddObject("Results", result);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet AnswerResults. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAnswerResults(AnswerResult answerResult)
        {
            base.AddObject("AnswerResults", answerResult);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="Answer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Answer : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Answer.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="answerBody">Исходное значение свойства AnswerBody.</param>
        /// <param name="isRight">Исходное значение свойства IsRight.</param>
        /// <param name="questionID">Исходное значение свойства QuestionID.</param>
        public static Answer CreateAnswer(global::System.Int32 id, global::System.String answerBody, global::System.Boolean isRight, global::System.Int32 questionID)
        {
            Answer answer = new Answer();
            answer.ID = id;
            answer.AnswerBody = answerBody;
            answer.IsRight = isRight;
            answer.QuestionID = questionID;
            return answer;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AnswerBody
        {
            get
            {
                return _AnswerBody;
            }
            set
            {
                OnAnswerBodyChanging(value);
                ReportPropertyChanging("AnswerBody");
                _AnswerBody = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AnswerBody");
                OnAnswerBodyChanged();
            }
        }
        private global::System.String _AnswerBody;
        partial void OnAnswerBodyChanging(global::System.String value);
        partial void OnAnswerBodyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsRight
        {
            get
            {
                return _IsRight;
            }
            set
            {
                OnIsRightChanging(value);
                ReportPropertyChanging("IsRight");
                _IsRight = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsRight");
                OnIsRightChanged();
            }
        }
        private global::System.Boolean _IsRight;
        partial void OnIsRightChanging(global::System.Boolean value);
        partial void OnIsRightChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 QuestionID
        {
            get
            {
                return _QuestionID;
            }
            set
            {
                OnQuestionIDChanging(value);
                ReportPropertyChanging("QuestionID");
                _QuestionID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("QuestionID");
                OnQuestionIDChanged();
            }
        }
        private global::System.Int32 _QuestionID;
        partial void OnQuestionIDChanging(global::System.Int32 value);
        partial void OnQuestionIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Answers_Questions", "Questions")]
        public Question Question
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Question>("TestModel.FK_Answers_Questions", "Questions").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Question>("TestModel.FK_Answers_Questions", "Questions").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Question> QuestionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Question>("TestModel.FK_Answers_Questions", "Questions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Question>("TestModel.FK_Answers_Questions", "Questions", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_AnswersResults_Answers", "AnswerResult")]
        public EntityCollection<AnswerResult> AnswersResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AnswerResult>("TestModel.FK_AnswersResults_Answers", "AnswerResult");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AnswerResult>("TestModel.FK_AnswersResults_Answers", "AnswerResult", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="AnswerResult")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AnswerResult : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта AnswerResult.
        /// </summary>
        /// <param name="resultID">Исходное значение свойства ResultID.</param>
        /// <param name="answerID">Исходное значение свойства AnswerID.</param>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static AnswerResult CreateAnswerResult(global::System.Int32 resultID, global::System.Int32 answerID, global::System.Int32 id)
        {
            AnswerResult answerResult = new AnswerResult();
            answerResult.ResultID = resultID;
            answerResult.AnswerID = answerID;
            answerResult.ID = id;
            return answerResult;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ResultID
        {
            get
            {
                return _ResultID;
            }
            set
            {
                OnResultIDChanging(value);
                ReportPropertyChanging("ResultID");
                _ResultID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ResultID");
                OnResultIDChanged();
            }
        }
        private global::System.Int32 _ResultID;
        partial void OnResultIDChanging(global::System.Int32 value);
        partial void OnResultIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AnswerID
        {
            get
            {
                return _AnswerID;
            }
            set
            {
                OnAnswerIDChanging(value);
                ReportPropertyChanging("AnswerID");
                _AnswerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AnswerID");
                OnAnswerIDChanged();
            }
        }
        private global::System.Int32 _AnswerID;
        partial void OnAnswerIDChanging(global::System.Int32 value);
        partial void OnAnswerIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_AnswersResults_Answers", "Answer")]
        public Answer Answer
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Answer>("TestModel.FK_AnswersResults_Answers", "Answer").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Answer>("TestModel.FK_AnswersResults_Answers", "Answer").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Answer> AnswerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Answer>("TestModel.FK_AnswersResults_Answers", "Answer");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Answer>("TestModel.FK_AnswersResults_Answers", "Answer", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_AnswersResults_Results", "Result")]
        public Result Result
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Result>("TestModel.FK_AnswersResults_Results", "Result").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Result>("TestModel.FK_AnswersResults_Results", "Result").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Result> ResultReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Result>("TestModel.FK_AnswersResults_Results", "Result");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Result>("TestModel.FK_AnswersResults_Results", "Result", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="Difficulty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Difficulty : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Difficulty.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="difficultyName">Исходное значение свойства DifficultyName.</param>
        /// <param name="difficultyDescription">Исходное значение свойства DifficultyDescription.</param>
        public static Difficulty CreateDifficulty(global::System.Int32 id, global::System.String difficultyName, global::System.String difficultyDescription)
        {
            Difficulty difficulty = new Difficulty();
            difficulty.ID = id;
            difficulty.DifficultyName = difficultyName;
            difficulty.DifficultyDescription = difficultyDescription;
            return difficulty;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DifficultyName
        {
            get
            {
                return _DifficultyName;
            }
            set
            {
                OnDifficultyNameChanging(value);
                ReportPropertyChanging("DifficultyName");
                _DifficultyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DifficultyName");
                OnDifficultyNameChanged();
            }
        }
        private global::System.String _DifficultyName;
        partial void OnDifficultyNameChanging(global::System.String value);
        partial void OnDifficultyNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DifficultyDescription
        {
            get
            {
                return _DifficultyDescription;
            }
            set
            {
                OnDifficultyDescriptionChanging(value);
                ReportPropertyChanging("DifficultyDescription");
                _DifficultyDescription = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DifficultyDescription");
                OnDifficultyDescriptionChanged();
            }
        }
        private global::System.String _DifficultyDescription;
        partial void OnDifficultyDescriptionChanging(global::System.String value);
        partial void OnDifficultyDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Tests_Difficulty", "Tests")]
        public EntityCollection<Test> Tests
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Test>("TestModel.FK_Tests_Difficulty", "Tests");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Test>("TestModel.FK_Tests_Difficulty", "Tests", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="Question")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Question : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Question.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="questionBody">Исходное значение свойства QuestionBody.</param>
        /// <param name="testID">Исходное значение свойства TestID.</param>
        /// <param name="questionType">Исходное значение свойства QuestionType.</param>
        public static Question CreateQuestion(global::System.Int32 id, global::System.String questionBody, global::System.Int32 testID, global::System.Int32 questionType)
        {
            Question question = new Question();
            question.ID = id;
            question.QuestionBody = questionBody;
            question.TestID = testID;
            question.QuestionType = questionType;
            return question;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String QuestionBody
        {
            get
            {
                return _QuestionBody;
            }
            set
            {
                OnQuestionBodyChanging(value);
                ReportPropertyChanging("QuestionBody");
                _QuestionBody = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("QuestionBody");
                OnQuestionBodyChanged();
            }
        }
        private global::System.String _QuestionBody;
        partial void OnQuestionBodyChanging(global::System.String value);
        partial void OnQuestionBodyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestID
        {
            get
            {
                return _TestID;
            }
            set
            {
                OnTestIDChanging(value);
                ReportPropertyChanging("TestID");
                _TestID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestID");
                OnTestIDChanged();
            }
        }
        private global::System.Int32 _TestID;
        partial void OnTestIDChanging(global::System.Int32 value);
        partial void OnTestIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 QuestionType
        {
            get
            {
                return _QuestionType;
            }
            set
            {
                OnQuestionTypeChanging(value);
                ReportPropertyChanging("QuestionType");
                _QuestionType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("QuestionType");
                OnQuestionTypeChanged();
            }
        }
        private global::System.Int32 _QuestionType;
        partial void OnQuestionTypeChanging(global::System.Int32 value);
        partial void OnQuestionTypeChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Answers_Questions", "Answers")]
        public EntityCollection<Answer> Answers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Answer>("TestModel.FK_Answers_Questions", "Answers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Answer>("TestModel.FK_Answers_Questions", "Answers", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Questions_Tests", "Tests")]
        public Test Test
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("TestModel.FK_Questions_Tests", "Tests").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("TestModel.FK_Questions_Tests", "Tests").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Test> TestReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("TestModel.FK_Questions_Tests", "Tests");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Test>("TestModel.FK_Questions_Tests", "Tests", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="Result")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Result : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="testID">Исходное значение свойства TestID.</param>
        /// <param name="userName">Исходное значение свойства UserName.</param>
        public static Result CreateResult(global::System.Int32 id, global::System.Int32 testID, global::System.String userName)
        {
            Result result = new Result();
            result.ID = id;
            result.TestID = testID;
            result.UserName = userName;
            return result;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TestID
        {
            get
            {
                return _TestID;
            }
            set
            {
                OnTestIDChanging(value);
                ReportPropertyChanging("TestID");
                _TestID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TestID");
                OnTestIDChanged();
            }
        }
        private global::System.Int32 _TestID;
        partial void OnTestIDChanging(global::System.Int32 value);
        partial void OnTestIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ResultDescription
        {
            get
            {
                return _ResultDescription;
            }
            set
            {
                OnResultDescriptionChanging(value);
                ReportPropertyChanging("ResultDescription");
                _ResultDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ResultDescription");
                OnResultDescriptionChanged();
            }
        }
        private global::System.String _ResultDescription;
        partial void OnResultDescriptionChanging(global::System.String value);
        partial void OnResultDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Results_Tests", "Test")]
        public Test Test
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("TestModel.FK_Results_Tests", "Test").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("TestModel.FK_Results_Tests", "Test").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Test> TestReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Test>("TestModel.FK_Results_Tests", "Test");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Test>("TestModel.FK_Results_Tests", "Test", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_AnswersResults_Results", "AnswerResult")]
        public EntityCollection<AnswerResult> AnswersResults
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<AnswerResult>("TestModel.FK_AnswersResults_Results", "AnswerResult");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<AnswerResult>("TestModel.FK_AnswersResults_Results", "AnswerResult", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="sysdiagram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagram : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта sysdiagram.
        /// </summary>
        /// <param name="name">Исходное значение свойства name.</param>
        /// <param name="principal_id">Исходное значение свойства principal_id.</param>
        /// <param name="diagram_id">Исходное значение свойства diagram_id.</param>
        public static sysdiagram Createsysdiagram(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagram sysdiagram = new sysdiagram();
            sysdiagram.name = name;
            sysdiagram.principal_id = principal_id;
            sysdiagram.diagram_id = diagram_id;
            return sysdiagram;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="Test")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Test : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Test.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="testName">Исходное значение свойства TestName.</param>
        /// <param name="categoryID">Исходное значение свойства CategoryID.</param>
        /// <param name="testAuthor">Исходное значение свойства TestAuthor.</param>
        /// <param name="difficultyID">Исходное значение свойства DifficultyID.</param>
        public static Test CreateTest(global::System.Int32 id, global::System.String testName, global::System.Int32 categoryID, global::System.String testAuthor, global::System.Int32 difficultyID)
        {
            Test test = new Test();
            test.ID = id;
            test.TestName = testName;
            test.CategoryID = categoryID;
            test.TestAuthor = testAuthor;
            test.DifficultyID = difficultyID;
            return test;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TestName
        {
            get
            {
                return _TestName;
            }
            set
            {
                OnTestNameChanging(value);
                ReportPropertyChanging("TestName");
                _TestName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TestName");
                OnTestNameChanged();
            }
        }
        private global::System.String _TestName;
        partial void OnTestNameChanging(global::System.String value);
        partial void OnTestNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TestDescription
        {
            get
            {
                return _TestDescription;
            }
            set
            {
                OnTestDescriptionChanging(value);
                ReportPropertyChanging("TestDescription");
                _TestDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TestDescription");
                OnTestDescriptionChanged();
            }
        }
        private global::System.String _TestDescription;
        partial void OnTestDescriptionChanging(global::System.String value);
        partial void OnTestDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private global::System.Int32 _CategoryID;
        partial void OnCategoryIDChanging(global::System.Int32 value);
        partial void OnCategoryIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TestAuthor
        {
            get
            {
                return _TestAuthor;
            }
            set
            {
                OnTestAuthorChanging(value);
                ReportPropertyChanging("TestAuthor");
                _TestAuthor = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TestAuthor");
                OnTestAuthorChanged();
            }
        }
        private global::System.String _TestAuthor;
        partial void OnTestAuthorChanging(global::System.String value);
        partial void OnTestAuthorChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DifficultyID
        {
            get
            {
                return _DifficultyID;
            }
            set
            {
                OnDifficultyIDChanging(value);
                ReportPropertyChanging("DifficultyID");
                _DifficultyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DifficultyID");
                OnDifficultyIDChanged();
            }
        }
        private global::System.Int32 _DifficultyID;
        partial void OnDifficultyIDChanging(global::System.Int32 value);
        partial void OnDifficultyIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Tests_Difficulty", "Difficulty")]
        public Difficulty Difficulty
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Difficulty>("TestModel.FK_Tests_Difficulty", "Difficulty").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Difficulty>("TestModel.FK_Tests_Difficulty", "Difficulty").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Difficulty> DifficultyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Difficulty>("TestModel.FK_Tests_Difficulty", "Difficulty");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Difficulty>("TestModel.FK_Tests_Difficulty", "Difficulty", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Questions_Tests", "Questions")]
        public EntityCollection<Question> Questions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Question>("TestModel.FK_Questions_Tests", "Questions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Question>("TestModel.FK_Questions_Tests", "Questions", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Tests_TestCategory", "TestCategory")]
        public TestCategory TestCategory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestCategory>("TestModel.FK_Tests_TestCategory", "TestCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestCategory>("TestModel.FK_Tests_TestCategory", "TestCategory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TestCategory> TestCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TestCategory>("TestModel.FK_Tests_TestCategory", "TestCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TestCategory>("TestModel.FK_Tests_TestCategory", "TestCategory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Results_Tests", "Result")]
        public EntityCollection<Result> Results
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Result>("TestModel.FK_Results_Tests", "Result");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Result>("TestModel.FK_Results_Tests", "Result", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TestModel", Name="TestCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TestCategory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта TestCategory.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="categoryName">Исходное значение свойства CategoryName.</param>
        public static TestCategory CreateTestCategory(global::System.Int32 id, global::System.String categoryName)
        {
            TestCategory testCategory = new TestCategory();
            testCategory.ID = id;
            testCategory.CategoryName = categoryName;
            return testCategory;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CategoryName
        {
            get
            {
                return _CategoryName;
            }
            set
            {
                OnCategoryNameChanging(value);
                ReportPropertyChanging("CategoryName");
                _CategoryName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CategoryName");
                OnCategoryNameChanged();
            }
        }
        private global::System.String _CategoryName;
        partial void OnCategoryNameChanging(global::System.String value);
        partial void OnCategoryNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CategoryDescription
        {
            get
            {
                return _CategoryDescription;
            }
            set
            {
                OnCategoryDescriptionChanging(value);
                ReportPropertyChanging("CategoryDescription");
                _CategoryDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CategoryDescription");
                OnCategoryDescriptionChanged();
            }
        }
        private global::System.String _CategoryDescription;
        partial void OnCategoryDescriptionChanging(global::System.String value);
        partial void OnCategoryDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TestModel", "FK_Tests_TestCategory", "Tests")]
        public EntityCollection<Test> Tests
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Test>("TestModel.FK_Tests_TestCategory", "Tests");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Test>("TestModel.FK_Tests_TestCategory", "Tests", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
